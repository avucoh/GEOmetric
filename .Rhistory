}
}
}
iBiosamp <- sapply(results, inferBiosamp)
install.packages("stringdist")
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(GEOquery)
library(stringdist)
source("Code/misc.R")
# Specify a directory where GSE downloaded files are stored
GEOtemp <- "GEOtemp"
GSELIST <- "test2.txt"
# Experiment Type (1-Channel or 2-Channel; more specific assignments, i.e. whether there was dye swap, happens in human review)
inferXPType <- function(DT) {
default <- "1C"
ch2 <- grep("source_name_ch2", names(DT))
if(length(ch2)) return("2C")
return(default)
}
ixpType <- sapply(results, inferXPType)
# BSM -- Molecule -- note: perhaps have a list of all known tlr ligands to match against
inferBSM <- function(DT) {
x1 <- rep("", nrow(DT))
bsmcol <- grep("agent|stimulation", names(DT))
if(length(bsmcol) == 1) {
info <- DT[bsmcol]
return(info)
}
return(x1)
}
iBSM <- sapply(results, inferBSM)
# BSMDCD -- Time
inferDCD <- function(DT) {
x1 <- rep("", nrow(DT))
# First find a column that specifically contains treatment info
tcol <- grep("^treatment|time", names(DT))
if(length(tcol)) {
info <- do.call(paste, DT[tcol])
} else { # Use information in sample title
info <- DT$title
}
m <- regexpr("[0-9]+ ?(d|h|D|H)|(D|d)(ay) ?[0-9]+", info)
x1[m != -1] <- regmatches(info, m)
# Sometimes time is stated as "overnight", which usually means "12 h"
x1[grepl("overnight", info)] <- "12h"
x1 <- tolower(gsub(" ", "", x1))
return(x1)
}
iDCD <- sapply(results, inferDCD)
# BSMDCD2 -- Dose/concentration
inferDCD2 <- function(DT) {
x1 <- rep("", nrow(DT))
dosecol <- grep("dose|concentration|amount|treatment", names(DT))
if(length(dosecol)) {
info <- do.call(paste, DT[dosecol])
m <- regexpr("[0-9.]+ ?(u|n|m)(g|M)?\\/?([A-Za-z]{2})", info)
x1[m != -1] <- regmatches(info, m)
}
return(x1)
}
iDCD2 <- sapply(results, inferDCD2)
# BiosampName -- to do: a more sophisticated implementation could also match to biosample ID
biosamps <- readLines("biosamps.txt") ## This is a list derived from "allbiosamples"
inferBiosamp <- function(DT) {
# First find the obvious columns, looking for one containing cell line/type first
cellcol <- grep("^cell.*ch1", colnames(DT))
if(length(cellcol)) {
cell <- do.call(paste, DT[cellcol])
return(cell)
} else {
tissuecol <- grep("^tissue.*ch1", colnames(DT))
if(length(tissuecol)) {
tissue <- do.call(paste, DT[tissuecol])
return(tissue)
} else { # Use the source_name_ch1 column
biosample <- sapply(DT$source_name_ch1, function(x) biosamps[amatch(x, biosamps)])
biosample[is.na(biosample)] <- "?"
return(biosample)
}
}
}
iBiosamp <- sapply(results, inferBiosamp)
# Control?
inferCTRL <- function(DT) {
s <- DT$title
ctrl <- as.numeric(grepl("wt|wildtype|control|ctrl|healthy|media|medium|veh|unstim|untreated|mock", s, ignore.case = T))
}
iCTRL <- sapply(results, inferCTRL)
subP <- function(data) {
cols <- grep("title|geo_accession|source_name|description|platform|characteristics|treatment", names(data))
data <- data[, cols]
data <- lapply(data, function(x) gsub("\n", " ", x))
as.data.table(data)
}
export <- lapply(results, subP)
# Name for output file
reviewtable <- "sample_review.txt"
export <- rbindlist(export, fill = T)
export[, GSE := unlist(mapply(rep, gses, sapply(results, nrow)))]
newcols1 <- c("xpType", "RefDye", "Comment", "Group", "Batch", "Node", "NodeFunction", "BSM", "BSMDCD", "BSMDCD2", "BioSampName")
export[, (newcols1) := ""]
export[, c("Ignore") := 0]
export[, c("XP") := 1]
export[, xpType := ixpType]
export[, isCTRL := iCTRL]
export[, BioSampName := iBiosamp]
export[, BSMDCD := iDCD]
export[, BSMDCD2 := iDCD2]
neworder <- c("GSE", newcols1[1:4], "Ignore", "XP", "isCTRL", newcols1[5:11],
"title", "geo_accession", grep("^source|treatment", names(export), val = T),
grep("^char", names(export), val = T), "platform_id", grep("^desc", names(export), val = T))
setcolorder(export, neworder)
head(export)
write.table(export, reviewtable, sep = "\t", row.names = F, quote = F)
head(biosamps)
head(export)
inferBiosamp <- function(DT) {
# First find the obvious columns, looking for one containing cell line/type first
cellcol <- grep("^cell.*ch1", colnames(DT))
if(length(cellcol)) {
cell <- do.call(paste, DT[cellcol])
return(cell)
} else {
tissuecol <- grep("^tissue.*ch1", colnames(DT))
if(length(tissuecol)) {
tissue <- do.call(paste, DT[tissuecol])
return(tissue)
} else { # Use the source_name_ch1 column
biosample <- sapply(DT$source_name_ch1, function(x) biosamps[grep(x, biosamps)])
biosample[is.na(biosample)] <- "?"
return(biosample)
}
}
}
iBiosamp <- sapply(results, inferBiosamp)
iBiosamp
head(biosamps)
test <- DT$source_name_ch1
test
names(DT)
head(DT$description)
head(DT)
inferBiosamp <- function(DT) {
# First find the obvious columns, looking for one containing cell line/type first
cellcol <- grep("^cell.*ch1", colnames(DT))
if(length(cellcol)) {
cell <- do.call(paste, DT[cellcol])
return(cell)
} else {
tissuecol <- grep("^tissue.*ch1", colnames(DT))
if(length(tissuecol)) {
tissue <- do.call(paste, DT[tissuecol])
return(tissue)
} else { # Use the source_name_ch1 column
biosample <- sapply(DT$treatment_protocol_ch1, function(x) biosamps[amatch(x, biosamps)])
biosample[is.na(biosample)] <- "?"
return(biosample)
}
}
}
iBiosamp <- sapply(results, inferBiosamp)
iBiosamp
mapply(paste, letters[1:5], LETTERS[1:10])
test <- mapply(stringdist::amatch, biosamps, DT$treatment_protocol_ch1)
test <- agrep(DT$source_name_ch1[1], x, value = T)
test <- agrep(DT$source_name_ch1[1], biosamps, value = T)
test
test <- sapply(biosamps, function(x) agrep(x, bDT$source_name_ch1[1], value = T))
test <- sapply(biosamps, function(x) agrep(x, DT$source_name_ch1[1], value = T))
grep("monocytes", biosamps)
biosamps[411]
grep("monocytes", DT$treatment_protocol_ch1)
grep("monocytes", DT$treatment_protocol_ch1, val = T)
grep("a", NULL)
biosample <- lapply(biosamps, function(b) grepl(b, c(DT$source_name_ch1, DT$treatment_protocol_ch1)))
grepl("monocytes", DT$source_name_ch1)
biosample <- lapply(biosamps, function(b) grep(b, c(DT$source_name_ch1, DT$treatment_protocol_ch1)))
grep("\\", biosamples)
grep("\\", biosamps)
biosamps
biosamps <- gsub("cells|/", "", biosamps)
biosamps
# BiosampName -- to do: a more sophisticated implementation could also match to biosample ID
biosamps <- readLines("biosamps.txt") ## This is a list derived from "allbiosamples"
grep("\\", biosamps, val = T)
grep("\", biosamps, val = T)
)
# BiosampName -- to do: a more sophisticated implementation could also match to biosample ID
biosamps <- readLines("biosamps.txt", "UCS-2LE") ## This is a list derived from "allbiosamples"
biosamps
table(is.na(biosamps))
# BiosampName -- to do: a more sophisticated implementation could also match to biosample ID
biosamps <- readLines("biosamps.txt", encoding = "UCS-2LE") ## This is a list derived from "allbiosamples"
biosamps
# BiosampName -- to do: a more sophisticated implementation could also match to biosample ID
biosamps <- readLines("biosamps.txt") ## This is a list derived from "allbiosamples"
table(duplicated(biosamps))
biosamps <- unique(biosamps)
biosamps <- writeLines("biosamps.txt")
biosamps <- readLines("biosamps.txt") ## This is a list derived from "allbiosamples"
biosamps <- readLines("biosamps.txt")
biosamps <- readLines("biosamps.txt")
getwd()
setwd("~/NURSA/GEOmetric")
biosamps <- readLines("biosamps.txt")
biosamps <- unique(biosamps)
writeLines(biosamps, "biosamps.txt")
biosample <- lapply(biosamps, function(b) grep(b, c(DT$source_name_ch1, DT$treatment_protocol_ch1)))
# BiosampName -- to do: a more sophisticated implementation could also match to biosample ID
biosamps <- readLines("biosamps.txt") ## This is a list derived from "allbiosamples"
biosample <- lapply(biosamps, function(b) grep(b, c(DT$source_name_ch1, DT$treatment_protocol_ch1)))
biosample <- biosample[sapply(biosample, length) >= 1 ]
length(biosample)
grep("monocytes", biosamps, val =T )
grep("monocytes", c(DT$source_name_ch1, DT$treatment_protocol_ch1))
grep("monocytes", c(DT$source_name_ch1))
DT$source_name_ch1
is.character(DT$source_name_ch1)
paste(DT$source_name_ch1, DT$doesntexist)
biosample <- lapply(biosamps, function(b) grep(b, paste(DT$source_name_ch1, DT$treatment_protocol_ch1)))
biosample <- biosample[sapply(biosample, length) >= 1 ]
biosample
names(biosample)
biosample <- lapply(biosamps, function(b) grep(b, paste(DT$source_name_ch1, DT$treatment_protocol_ch1)))
biosamps[sapply(biosample, length) >= 1 ]
DT$treatment_protocol_ch1
names(biosample) <- biosamps
head(biosample)
biosample <- biosamps[sapply(biosample, length) >= 1 ]
biosample
iosample <- lapply(biosamps, function(b) grep(b, paste(DT$source_name_ch1, DT$treatment_protocol_ch1)))
names(biosample) <- biosamps
biosample <- lapply(biosamps, function(b) grep(b, paste(DT$source_name_ch1, DT$treatment_protocol_ch1)))
names(biosample) <- biosamps
biosample <- biosample[sapply(biosample, length) >= 1 ]
biosample
sort.list(biosample)
sort(biosample)
sort.list(sapply(biosample, length))
order(sapply(biosample, length))
biosample[order(sapply(biosample, length))][1:2]
biosample[order(sapply(biosample, length), decreasing = F)][1:2]
biosample[order(sapply(biosample, length), decreasing = T)][1:2]
biosample[[1]]
x1 <- rep("", 1:10)
x1 <- rep("", 10)
x1
x1[ biosample[[1]] ] <- names(biosample[[1]])
names(biosample)[1]
x1[ biosample[[1]] ] <- "monocytes"
x1
biosample2 <- biosample[1]
biosample2
x1 [biosample2]
x1[biosample2]
x1 <- rep("", 10)
biosample[[1]]
biosample[[3]]
biosample[[7]]
biosample[7]
biosample
biosample <- biosample[order(sapply(biosample, length), decreasing = T)]
biosample
paste(names(biosample[1:2]))
paste(names(biosample)[1:2])
names(biosample)[1:2]
paste(names(biosample)[1:2])
paste(names(biosample)[1:2], collapse = "")
paste(names(biosample)[1:2], collapse = " ")
paste(names(biosample)[1:2], collapse = "-")
paste(names(biosample)[1:2], collapse = ".")
paste(names(biosample)[1:2], collapse = "/")
x1[ intersect(biosample[[1]], biosample[[2]]) ] <- paste(names(biosample)[1:2], collapse = "/")
x1
names(biosample[1:10])
paste(names(biosample[1:10]), collase = " ")
biosample <- lapply(biosamps, function(b) grepl(b, paste(DT$source_name_ch1, DT$treatment_protocol_ch1)))
names(biosample) <- biosamps
biosample <- biosample[sapply(biosample, sum) >= 1 ]
biosample <- biosample[order(sapply(biosample, sum), decreasing = T)]
biosample
biosample[[1]] & biosample[[2]]
rep("mono", biosample[[1]])
c("monocytes")[c(TRUE, FALSE, TRUE)]
c(bsaiomple[1:2])
c(biosample[1:2])
test <- biosample[[1]]
ifelse(test, "mono", "")
lapply(biosample[1:2], function(x) ifelse(x, names(x), ""))
biosample[1:2]
ifelse(test, names(test), ""))
ifelse(test, names(test), "")
test
ifelse(test, names(biosample)[[1]], "")
ifelse(test, names(biosample)[[2]], "")
lapply(1:2, function(i) ifelse(biosample[[i]], names(biosample)[[i]], ""))
paste(lapply(1:2, function(i) ifelse(biosample[[i]], names(biosample)[[i]], "")))
paste(lapply(1:2, function(i) ifelse(biosample[[i]], names(biosample)[[i]])), collapse = "/")
paste(lapply(1:2, function(i) ifelse(biosample[[i]], names(biosample)[[i]])), collapse = "")
paste(lapply(1:2, function(i) ifelse(biosample[[i]], names(biosample)[[i]])), sep = "", collapse = "/")
test <- lapply(1:2, function(i) ifelse(biosample[[i]], names(biosample)[[i]], ""))
paste(test, collapse = "/")
paste(test, collapse = " ")
paste(test, sep = " ")
do.call(paste, test)
do.call(paste, test, sep = "/")
Map(paste, test)
do.call(paste, test, args(sep = "/"))
do.call(paste, test, sep = "/")
test
paste(test[[1]], paste[[2]], sep = "/")
paste(test[[1]], test[[2]], sep = "/")
x1 <- lapply(c(1,3), function(i) ifelse(biosample[[i]], names(biosample)[[i]], ""))
x1
x1 <- paste(x1[[1]], x1[[2]], sep = "/")
x1
biosample[1:10]
test <- biosample[1]
test <- test[1:2]
test
names(test)[[2]]
paste(NA, "")
names(test[2])
names(test)[2])
names(test)[2]
test
rm(test)
x1
rm(x1)
bs <- lapply(biosamps, function(b) grepl(b, paste(DT$source_name_ch1, DT$treatment_protocol_ch1)))
names(bs) <- biosamps
bs <- bs[sapply(bs, sum) >= 1 ]
if(!length(bs)) return(rep("?", nrow(DT)))
bs <- bs[order(sapply(bs, sum), decreasing = T)]
bs
x1 <- lapply(1:nterm, function(i) ifelse(bs[[i]], names(bs)[[i]], ""))
nterm <- ifelse(length(bs) > 1, 2, 1)
x1 <- lapply(1:nterm, function(i) ifelse(bs[[i]], names(bs)[[i]], ""))
x1
mapply(paste, x1)
mapply(paste, x1, collapse = "/")
mapply(paste, x1, sep = "/")
mapply(paste, x1[1])
mapply(paste, x1[1], collapse = "")
mapply(paste, x1[1], collapse = " ")
mapply(paste, x1[1], sep = " ")
Map(paste, x1[1], sep = " ")
Map(paste, x1, sep = "/")
Map(paste, x1, collapse = "/")
paste(x1)
do.call(paste, x1)
do.call(paste, x1[1])
do.call(paste, x1[1], collapse = "/")
do.call(paste, x1[1], sep = "/")
do.call("paste", c(x1, sep = "/"))
do.call("paste", c(x1, sep = ""))
x1 <- lapply(1:nterm, function(i) ifelse(bs[[i]], names(bs)[[i]], character(0)))
x1
x1 <- lapply(1:3, function(i) ifelse(bs[[i]], names(bs)[[i]], character(0)))
x1
x1 <- lapply(1:3, function(i) ifelse(bs[[i]], names(bs)[[i]], NULL))
x1
paste("A", NULL, sep = "/")
trimws(do.call("paste", x1))
x1 <- lapply(1:nterm, function(i) ifelse(bs[[i]], names(bs)[[i]], ""))
x1 <- do.call("paste", x1)
x1 <- trimws(x1)
x1
# Experiment Type (1-Channel or 2-Channel; more specific assignments, i.e. whether there was dye swap, happens in human review)
inferXPType <- function(DT) {
default <- "1C"
ch2 <- grep("source_name_ch2", names(DT))
if(length(ch2)) return("2C")
return(default)
}
ixpType <- sapply(results, inferXPType)
# BSM -- Molecule -- note: perhaps have a list of all known tlr ligands to match against
inferBSM <- function(DT) {
x1 <- rep("", nrow(DT))
bsmcol <- grep("agent|stimulation", names(DT))
if(length(bsmcol) == 1) {
info <- DT[bsmcol]
return(info)
}
return(x1)
}
iBSM <- sapply(results, inferBSM)
# BSMDCD -- Time
inferDCD <- function(DT) {
x1 <- rep("", nrow(DT))
# First find a column that specifically contains treatment info
tcol <- grep("^treatment|time", names(DT))
if(length(tcol)) {
info <- do.call(paste, DT[tcol])
} else { # Use information in sample title
info <- DT$title
}
m <- regexpr("[0-9]+ ?(d|h|D|H)|(D|d)(ay) ?[0-9]+", info)
x1[m != -1] <- regmatches(info, m)
# Sometimes time is stated as "overnight", which usually means "12 h"
x1[grepl("overnight", info)] <- "12h"
x1 <- tolower(gsub(" ", "", x1))
return(x1)
}
iDCD <- sapply(results, inferDCD)
# BSMDCD2 -- Dose/concentration
inferDCD2 <- function(DT) {
x1 <- rep("", nrow(DT))
dosecol <- grep("dose|concentration|amount|treatment", names(DT))
if(length(dosecol)) {
info <- do.call(paste, DT[dosecol])
m <- regexpr("[0-9.]+ ?(u|n|m)(g|M)?\\/?([A-Za-z]{2})", info)
x1[m != -1] <- regmatches(info, m)
}
return(x1)
}
iDCD2 <- sapply(results, inferDCD2)
# BiosampName -- to do: a more sophisticated implementation could also match to biosample ID
biosamps <- readLines("biosamps.txt") ## This is a list derived from "allbiosamples"
inferBiosamp <- function(DT) {
# First find the obvious columns containing cell line/type
cellcol <- grep("^cell.*ch1", colnames(DT))
if(length(cellcol)) {
cell <- do.call(paste, DT[cellcol])
return(cell)
} else {
tissuecol <- grep("^tissue.*ch1", colnames(DT))
if(length(tissuecol)) {
tissue <- do.call(paste, DT[tissuecol])
return(tissue)
} else { # Use the source_name_ch1,treatment_protocol_ch1 columns otherwise
bs <- lapply(biosamps, function(b) grepl(b, paste(DT$source_name_ch1, DT$treatment_protocol_ch1)))
names(bs) <- biosamps
bs <- bs[sapply(bs, sum) >= 1 ]
if(!length(bs)) return(rep("?", nrow(DT)))
bs <- bs[order(sapply(bs, sum), decreasing = T)]
nterm <- ifelse(length(bs) > 1, 2, 1)
x1 <- lapply(1:nterm, function(i) ifelse(bs[[i]], names(bs)[[i]], ""))
x1 <- do.call("paste", x1)
x1 <- trimws(x1)
return(x1)
}
}
}
iBiosamp <- sapply(results, inferBiosamp)
# Control?
inferCTRL <- function(DT) {
s <- DT$title
ctrl <- as.numeric(grepl("wt|wildtype|control|ctrl|healthy|media|medium|veh|unstim|untreated|mock", s, ignore.case = T))
}
iCTRL <- sapply(results, inferCTRL)
subP <- function(data) {
cols <- grep("title|geo_accession|source_name|description|platform|characteristics|treatment", names(data))
data <- data[, cols]
data <- lapply(data, function(x) gsub("\n", " ", x))
as.data.table(data)
}
export <- lapply(results, subP)
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(GEOquery)
library(stringdist)
source("Code/misc.R")
# Specify a directory where GSE downloaded files are stored
GEOtemp <- "GEOtemp"
GSELIST <- "test2.txt"
# Name for output file
reviewtable <- "sample_review.txt"
subP <- function(data) {
cols <- grep("title|geo_accession|source_name|description|platform|characteristics|treatment", names(data))
data <- data[, cols]
data <- lapply(data, function(x) gsub("\n", " ", x))
as.data.table(data)
}
export <- lapply(results, subP)
export <- rbindlist(export, fill = T)
export[, GSE := unlist(mapply(rep, gses, sapply(results, nrow)))]
newcols1 <- c("xpType", "RefDye", "Comment", "Group", "Batch", "Node", "NodeFunction", "BSM", "BSMDCD", "BSMDCD2", "BioSampName")
export[, (newcols1) := ""]
export[, c("Ignore") := 0]
export[, c("XP") := 1]
export[, xpType := ixpType]
export[, isCTRL := iCTRL]
export[, BioSampName := iBiosamp]
export[, BSMDCD := iDCD]
export[, BSMDCD2 := iDCD2]
neworder <- c("GSE", newcols1[1:4], "Ignore", "XP", "isCTRL", newcols1[5:11],
"title", "geo_accession", grep("^source|treatment", names(export), val = T),
grep("^char", names(export), val = T), "platform_id", grep("^desc", names(export), val = T))
setcolorder(export, neworder)
head(export)
write.table(export, reviewtable, sep = "\t", row.names = F, quote = F)
ok <- allOK(results)
table(ok)
print(paste("List of GSEs that failed:", names(results)[!ok]))
results <- results[ok] # Go back to failures later, proceed with OK
ok <- allOK(results)
table(ok)
print("List of GSEs that failed:", names(results)[!ok])
ok <- allOK(results)
table(ok)
cat("List of GSEs that failed:", names(results)[!ok])
results <- results[ok] # Go back to failures later, proceed with OK
ok <- allOK(results)
table(ok)
cat("GSEs that failed:", names(results)[!ok])
results <- results[ok] # Go back to failures later, proceed with OK
ok <- allOK(results)
table(ok)
cat("GSE ids that failed:", names(results)[!ok])
results <- results[ok] # Go back to failures later, proceed with OK
