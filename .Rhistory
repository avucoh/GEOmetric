xpType <- dt[1, xpType]
eset <- exprs(gse)
batch <- factor(dt$Batch)
group <- factor(dt$Group)
if(grepl("1C", xpType)) {
# Account for batch/block design
if(nlevels(batch) > 1) {
design <- model.matrix(~0 + group + batch)
colnames(design) <- gsub("group|batch", "", colnames(design))
} else {
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
}
fit <- lmFit(eset, design)
} else if(grepl("2CDirect|2CCommonRef", xpType)) {
targets <- dt[, .(geo_accession, RefDye, Group)]
targets[, Cy3 := ifelse(RefDye == "Cy3", "Ref", Group)]
targets[, Cy5 := ifelse(RefDye == "Cy5", "Ref", Group)]
targets <- targets[, .(geo_accession, Cy3, Cy5)]
design <- modelMatrix(targets, ref = "Ref")
fit <- lmFit(eset, design)
} else if(grepl("Htseq", xpType)) {
## TO DO: call voom -- need to review how to process HT data first
return(NULL)
} else {
return(NULL)
}
return(fit)
}
results2[[2]] <- try2getFit("GSE47147")
results[[2]]
results2[[2]]
### Module Functions
fitDesign <- function(gse) {
dt <- DT[GSE == gse]
path <- paste0("GEOtemp/", gse, "_series_matrix.txt.gz")
if(!file.exists(path)) getGEO(gse, parseCharacteristics = F)
gse <- getGEO(filename = path, parseCharacteristics = F)
gse <- gse[, which(dt$Ignore == 0)] # in rare cases, exclude samples from eset
dt <- dt[Ignore == 0]
xpType <- dt[1, xpType]
eset <- exprs(gse)
batch <- factor(dt$Batch)
group <- factor(dt$Group)
if(grepl("1C", xpType)) {
# Account for batch/block design
if(nlevels(batch) > 1) {
design <- model.matrix(~0 + group + batch)
colnames(design) <- gsub("group|batch", "", colnames(design))
} else {
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
}
fit <- lmFit(eset, design)
} else if(grepl("2CDirect|2CCommonRef", xpType)) {
targets <- dt[, .(geo_accession, RefDye, Group)]
targets[, Cy3 := ifelse(RefDye == "Cy3", "Ref", Group)]
targets[, Cy5 := ifelse(RefDye == "Cy5", "Ref", Group)]
targets <- targets[, .(geo_accession, Cy3, Cy5)]
design <- modelMatrix(targets, ref = "Ref")
fit <- lmFit(eset, design)
} else if(grepl("Htseq", xpType)) {
## TO DO: call voom -- need to review how to process HT data first
return(NULL)
} else {
return(NULL)
}
return(fit)
}
results2[[2]] <- try2getFit("GSE47147")
results2[[2]]
try2getFit("GSE58756")
DT <- fread("tlr7_reviewed.txt")
DT <- DT[GSE != "", 1:17]
contrasts <- fread("contrasts_tlr7.txt")
gses <- unique(contrasts$GSE)
gses <- unique(contrasts[, .(GSE, BioSampName)])
gses
DT <- split(DT, by = "GSE")
names(DT)
contrasts <- split(contrasts, by = c("GSE", "BioSampName"))
contrasts[[1]]
DT <- fread("tlr7_reviewed.txt")
DT <- DT[GSE != "", 1:17]
setkey(DT, GSE)
fitDesign <- function(contrast) {
dt <- DT[contrast$GSE[1]]
bio <- contrast$BioSampName[1]
xpType <- contrast$xpType[1]
path <- paste0("GEOtemp/", gse, "_series_matrix.txt.gz")
if(!file.exists(path)) getGEO(gse, parseCharacteristics = F)
gse <- getGEO(filename = path, parseCharacteristics = F)
select <- (dt$BioSampName == bio) & (dt$Ignore == 0)
gse <- gse[, select]
dt <- dt[select]
eset <- exprs(gse)
batch <- factor(dt$Batch)
group <- factor(dt$Group)
if(grepl("1C", xpType)) {
# Account for batch/block design
if(nlevels(batch) > 1) {
design <- model.matrix(~0 + group + batch)
colnames(design) <- gsub("group|batch", "", colnames(design))
} else {
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
}
fit <- lmFit(eset, design)
} else if(grepl("2CDirect|2CCommonRef", xpType)) {
targets <- dt[, .(geo_accession, RefDye, Group)]
targets[, Cy3 := ifelse(RefDye == "Cy3", "Ref", Group)]
targets[, Cy5 := ifelse(RefDye == "Cy5", "Ref", Group)]
targets <- targets[, .(geo_accession, Cy3, Cy5)]
design <- modelMatrix(targets, ref = "Ref")
fit <- lmFit(eset, design)
} else if(grepl("Htseq", xpType)) {
## TO DO: call voom -- need to review how to process HT data first
return(NULL)
} else {
return(NULL)
}
return(fit)
}
fitDesign(contrasts[[1]])
fitDesign <- function(contrast) {
dt <- DT[contrast$GSE[1]]
bio <- contrast$BioSampName[1]
xpType <- contrast$xpType[1]
path <- paste0("GEOtemp/", gse, "_series_matrix.txt.gz")
if(!file.exists(path)) getGEO(gse, parseCharacteristics = F)
gse <- getGEO(filename = path, parseCharacteristics = F)
select <- (dt$BioSampName == bio) & (dt$Ignore == 0)
gse <- gse[, select]
dt <- dt[select]
eset <- exprs(gse)
batch <- factor(dt$Batch)
group <- factor(dt$Group)
dt
# if(grepl("1C", xpType)) {
#   # Account for batch/block design
#   if(nlevels(batch) > 1) {
#     design <- model.matrix(~0 + group + batch)
#     colnames(design) <- gsub("group|batch", "", colnames(design))
#   } else {
#     design <- model.matrix(~0 + group)
#     colnames(design) <- levels(group)
#   }
#   fit <- lmFit(eset, design)
# } else if(grepl("2CDirect|2CCommonRef", xpType)) {
#   targets <- dt[, .(geo_accession, RefDye, Group)]
#   targets[, Cy3 := ifelse(RefDye == "Cy3", "Ref", Group)]
#   targets[, Cy5 := ifelse(RefDye == "Cy5", "Ref", Group)]
#   targets <- targets[, .(geo_accession, Cy3, Cy5)]
#   design <- modelMatrix(targets, ref = "Ref")
#   fit <- lmFit(eset, design)
# } else if(grepl("Htseq", xpType)) {
#   ## TO DO: call voom -- need to review how to process HT data first
#   return(NULL)
# } else {
#   return(NULL)
# }
# return(fit)
}
fitDesign(contrasts[[1]])
fitDesign <- function(contrast) {
dt <- DT[contrast$GSE[1]]
bio <- contrast$BioSampName[1]
xpType <- contrast$xpType[1]
path <- paste0("GEOtemp/", gse, "_series_matrix.txt.gz")
if(!file.exists(path)) getGEO(gse, parseCharacteristics = F)
gse <- getGEO(filename = path, parseCharacteristics = F)
select <- (dt$BioSampName == bio) & (dt$Ignore == 0)
gse <- gse[, select]
dt <- dt[select]
eset <- exprs(gse)
batch <- factor(dt$Batch)
group <- factor(dt$Group)
dt
if(grepl("1C", xpType)) {
# Account for batch/block design
if(nlevels(batch) > 1) {
design <- model.matrix(~0 + group + batch)
colnames(design) <- gsub("group|batch", "", colnames(design))
} else {
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
}
fit <- lmFit(eset, design)
} else if(grepl("2CDirect|2CCommonRef", xpType)) {
targets <- dt[, .(geo_accession, RefDye, Group)]
targets[, Cy3 := ifelse(RefDye == "Cy3", "Ref", Group)]
targets[, Cy5 := ifelse(RefDye == "Cy5", "Ref", Group)]
targets <- targets[, .(geo_accession, Cy3, Cy5)]
design <- modelMatrix(targets, ref = "Ref")
fit <- lmFit(eset, design)
} else if(grepl("Htseq", xpType)) {
## TO DO: call voom -- need to review how to process HT data first
return(NULL)
} else {
return(NULL)
}
return(fit)
}
fitDesign(contrasts[[1]])
fitDesign <- function(contrast) {
dt <- DT[contrast$GSE[1]]
bio <- contrast$BioSampName[1]
xpType <- contrast$xpType[1]
path <- paste0("GEOtemp/", gse, "_series_matrix.txt.gz")
if(!file.exists(path)) getGEO(gse, parseCharacteristics = F)
gse <- getGEO(filename = path, parseCharacteristics = F)
select <- (dt$BioSampName == bio) & (dt$Ignore == 0)
gse <- gse[, select]
dt <- dt[select]
eset <- exprs(gse)
batch <- factor(dt$Batch)
group <- factor(dt$Group)
dt
if(grepl("1C", xpType)) {
# Account for batch/block design
if(nlevels(batch) > 1) {
design <- model.matrix(~0 + group + batch)
colnames(design) <- gsub("group|batch", "", colnames(design))
} else {
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
}
fit <- lmFit(eset, design)
} else if(grepl("2CDirect|2CCommonRef", xpType)) {
targets <- dt[, .(geo_accession, RefDye, Group)]
targets[, Cy3 := ifelse(RefDye == "Cy3", "Ref", Group)]
targets[, Cy5 := ifelse(RefDye == "Cy5", "Ref", Group)]
targets <- targets[, .(geo_accession, Cy3, Cy5)]
design <- modelMatrix(targets, ref = "Ref")
design
# fit <- lmFit(eset, design)
} else if(grepl("Htseq", xpType)) {
## TO DO: call voom -- need to review how to process HT data first
return(NULL)
} else {
return(NULL)
}
return(fit)
}
fitDesign(contrasts[[1]])
fitDesign <- function(contrast) {
dt <- DT[contrast$GSE[1]]
bio <- contrast$BioSampName[1]
xpType <- contrast$xpType[1]
path <- paste0("GEOtemp/", gse, "_series_matrix.txt.gz")
if(!file.exists(path)) getGEO(gse, parseCharacteristics = F)
gse <- getGEO(filename = path, parseCharacteristics = F)
select <- (dt$BioSampName == bio) & (dt$Ignore == 0)
gse <- gse[, select]
dt <- dt[select]
eset <- exprs(gse)
batch <- factor(dt$Batch)
group <- factor(dt$Group)
dt
if(grepl("1C", xpType)) {
# Account for batch/block design
if(nlevels(batch) > 1) {
design <- model.matrix(~0 + group + batch)
colnames(design) <- gsub("group|batch", "", colnames(design))
} else {
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
}
fit <- lmFit(eset, design)
} else if(grepl("2CDirect|2CCommonRef", xpType)) {
targets <- dt[, .(geo_accession, RefDye, Group)]
targets[, Cy3 := ifelse(RefDye == "Cy3", "Ref", Group)]
targets[, Cy5 := ifelse(RefDye == "Cy5", "Ref", Group)]
targets <- targets[, .(geo_accession, Cy3, Cy5)]
design <- modelMatrix(targets, ref = "Ref")
design
# fit <- lmFit(eset, design)
} else if(grepl("Htseq", xpType)) {
## TO DO: call voom -- need to review how to process HT data first
return(NULL)
} else {
return(NULL)
}
#return(fit)
}
fitDesign(contrasts[[1]])
fitDesign <- function(contrast) {
dt <- DT[contrast$GSE[1]]
bio <- contrast$BioSampName[1]
xpType <- contrast$xpType[1]
path <- paste0("GEOtemp/", gse, "_series_matrix.txt.gz")
if(!file.exists(path)) getGEO(gse, parseCharacteristics = F)
gse <- getGEO(filename = path, parseCharacteristics = F)
select <- (dt$BioSampName == bio) & (dt$Ignore == 0)
eset <- exprs(gse)
eset <- eset[, select]
dt <- dt[select]
batch <- factor(dt$Batch)
group <- factor(dt$Group)
dt
if(grepl("1C", xpType)) {
# Account for batch/block design
if(nlevels(batch) > 1) {
design <- model.matrix(~0 + group + batch)
colnames(design) <- gsub("group|batch", "", colnames(design))
} else {
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
}
fit <- lmFit(eset, design)
} else if(grepl("2CDirect|2CCommonRef", xpType)) {
targets <- dt[, .(geo_accession, RefDye, Group)]
targets[, Cy3 := ifelse(RefDye == "Cy3", "Ref", Group)]
targets[, Cy5 := ifelse(RefDye == "Cy5", "Ref", Group)]
targets <- targets[, .(geo_accession, Cy3, Cy5)]
design <- modelMatrix(targets, ref = "Ref")
fit <- lmFit(eset, design)
} else if(grepl("Htseq", xpType)) {
## TO DO: call voom -- need to review how to process HT data first
return(NULL)
} else {
return(NULL)
}
return(fit)
}
fitDesign(contrasts[[1]])
fitDesign <- function(contrast) {
dt <- DT[contrast$GSE[1]]
bio <- contrast$BioSampName[1]
xpType <- contrast$xpType[1]
path <- paste0("GEOtemp/", gse, "_series_matrix.txt.gz")
if(!file.exists(path)) getGEO(gse, parseCharacteristics = F)
gse <- getGEO(filename = path, parseCharacteristics = F)
select <- (dt$BioSampName == bio) & (dt$Ignore == 0)
eset <- exprs(gse)
eset <- eset[, select]
dt <- dt[select]
batch <- factor(dt$Batch)
group <- factor(dt$Group)
dt
if(grepl("1C", xpType)) {
# Account for batch/block design
if(nlevels(batch) > 1) {
design <- model.matrix(~0 + group + batch)
colnames(design) <- gsub("group|batch", "", colnames(design))
} else {
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
}
fit <- lmFit(eset, design)
} else if(grepl("2CDirect|2CCommonRef", xpType)) {
targets <- dt[, .(geo_accession, RefDye, Group)]
targets[, Cy3 := ifelse(RefDye == "Cy3", "Ref", Group)]
targets[, Cy5 := ifelse(RefDye == "Cy5", "Ref", Group)]
targets <- targets[, .(geo_accession, Cy3, Cy5)]
design <- modelMatrix(targets, ref = "Ref")
# fit <- lmFit(eset, design)
} else if(grepl("Htseq", xpType)) {
## TO DO: call voom -- need to review how to process HT data first
return(NULL)
} else {
return(NULL)
}
return(select)
}
fitDesign(contrasts[[1]])
fitDesign <- function(contrast) {
dt <- DT[contrast$GSE[1]]
bio <- contrast$BioSampName[1]
xpType <- contrast$xpType[1]
path <- paste0("GEOtemp/", gse, "_series_matrix.txt.gz")
if(!file.exists(path)) getGEO(gse, parseCharacteristics = F)
gse <- getGEO(filename = path, parseCharacteristics = F)
select <- (dt$BioSampName == bio) & (dt$Ignore == 0)
eset <- exprs(gse)
eset <- eset[, select]
dt <- dt[select]
batch <- factor(dt$Batch)
group <- factor(dt$Group)
dt
if(grepl("1C", xpType)) {
# Account for batch/block design
if(nlevels(batch) > 1) {
design <- model.matrix(~0 + group + batch)
colnames(design) <- gsub("group|batch", "", colnames(design))
} else {
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
}
fit <- lmFit(eset, design)
} else if(grepl("2CDirect|2CCommonRef", xpType)) {
targets <- dt[, .(geo_accession, RefDye, Group)]
targets[, Cy3 := ifelse(RefDye == "Cy3", "Ref", Group)]
targets[, Cy5 := ifelse(RefDye == "Cy5", "Ref", Group)]
targets <- targets[, .(geo_accession, Cy3, Cy5)]
design <- modelMatrix(targets, ref = "Ref")
# fit <- lmFit(eset, design)
} else if(grepl("Htseq", xpType)) {
## TO DO: call voom -- need to review how to process HT data first
return(NULL)
} else {
return(NULL)
}
return(dim(eset))
}
fitDesign(contrasts[[1]])
fitDesign <- function(contrast) {
dt <- DT[contrast$GSE[1]]
bio <- contrast$BioSampName[1]
xpType <- contrast$xpType[1]
path <- paste0("GEOtemp/", gse, "_series_matrix.txt.gz")
if(!file.exists(path)) getGEO(gse, parseCharacteristics = F)
gse <- getGEO(filename = path, parseCharacteristics = F)
select <- (dt$BioSampName == bio) & (dt$Ignore == 0)
eset <- exprs(gse)
eset <- eset[, select]
dt <- dt[select]
batch <- factor(dt$Batch)
group <- factor(dt$Group)
dt
if(grepl("1C", xpType)) {
# Account for batch/block design
if(nlevels(batch) > 1) {
design <- model.matrix(~0 + group + batch)
colnames(design) <- gsub("group|batch", "", colnames(design))
} else {
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
}
fit <- lmFit(eset, design)
} else if(grepl("2CDirect|2CCommonRef", xpType)) {
targets <- dt[, .(geo_accession, RefDye, Group)]
targets[, Cy3 := ifelse(RefDye == "Cy3", "Ref", Group)]
targets[, Cy5 := ifelse(RefDye == "Cy5", "Ref", Group)]
targets <- targets[, .(geo_accession, Cy3, Cy5)]
design <- modelMatrix(targets, ref = "Ref")
# fit <- lmFit(eset, design)
} else if(grepl("Htseq", xpType)) {
## TO DO: call voom -- need to review how to process HT data first
return(NULL)
} else {
return(NULL)
}
return(eset)
}
fitDesign(contrasts[[1]])
contrasts[[1]]
DT[contrasts[[1]]$GSE[1]]
fitDesign <- function(contrast) {
gse <- contrast$GSE[1]
dt <- DT[gse]
bio <- contrast$BioSampName[1]
xpType <- contrast$xpType[1]
path <- paste0("GEOtemp/", gse, "_series_matrix.txt.gz")
if(!file.exists(path)) getGEO(gse, parseCharacteristics = F)
gse <- getGEO(filename = path, parseCharacteristics = F)
select <- (dt$BioSampName == bio) & (dt$Ignore == 0)
eset <- exprs(gse)
eset <- eset[, select]
dt <- dt[select]
batch <- factor(dt$Batch)
group <- factor(dt$Group)
dt
if(grepl("1C", xpType)) {
# Account for batch/block design
if(nlevels(batch) > 1) {
design <- model.matrix(~0 + group + batch)
colnames(design) <- gsub("group|batch", "", colnames(design))
} else {
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
}
fit <- lmFit(eset, design)
} else if(grepl("2CDirect|2CCommonRef", xpType)) {
targets <- dt[, .(geo_accession, RefDye, Group)]
targets[, Cy3 := ifelse(RefDye == "Cy3", "Ref", Group)]
targets[, Cy5 := ifelse(RefDye == "Cy5", "Ref", Group)]
targets <- targets[, .(geo_accession, Cy3, Cy5)]
design <- modelMatrix(targets, ref = "Ref")
fit <- lmFit(eset, design)
} else if(grepl("Htseq", xpType)) {
## TO DO: call voom -- need to review how to process HT data first
return(NULL)
} else {
return(NULL)
}
return(fit)
}
try2getFit <- function(contrast) {
try({
fit <- fitDesign(contrast)
if(is.null(fit)) return(NULL)
fit2 <- try(fitContrast(fit, contrast))
return(fit2)
})
}
fitDesign(contrasts[[1]])
results <- lapply(contrasts, try2getFit)
results <- results[!sapply(results, is.null)]
error <- which(sapply(results, class) == "try-error")
error
names(results)
results[[3]]
names(results)
names(results) <- gsub("[.].*", "", names(results))
names(results)
for(gse in names(results)) {
write.fit(results[[gse]], results = NULL, file = paste0("Results/", gse, "_fit.txt"), digits = 10,
adjust = "fdr", method = "separate", F.adjust = "none", sep="\t")
}
rm(results2)
rm(x)
